import io
from typing import Dict, Any
from mpi4all.version import __version__


class BaseGenerator:

    def __init__(self, prefix='M4A'):
        self._prefix = prefix + '_'
        self._c_source = io.StringIO()

    def _build_macros(self, info: Dict[str, Any]):
        c_source = self._c_source

        c_source.write('#include <stddef.h>\n')
        c_source.write('#include <stdlib.h>\n')
        c_source.write('#include <string.h>\n')
        c_source.write('#include <mpi.h>\n\n')

        for macro in sorted(info['macros'], key=lambda m: m['name']):
            if not macro['var']:
                if macro['type'][-1] == ')' and macro['type'][0] != '(':
                    c_source.write(
                        'typedef ' + macro['type'].replace('(', f'(*{self._prefix}' + macro['name'] + ')(', 1) + ';\n')
                else:
                    c_source.write('typedef ' + macro['type'] + f' {self._prefix}' + macro['name'] + ';\n')
                self._write_macro(macro)
                continue
            c_type = macro['type']
            c_source.write(self._c_dec(c_type, self._prefix + macro['name']))
            c_source.write(' = ' + macro['name'] + ';\n')
            self._write_macro(macro)

    def _write_macro(self, macro: Dict[str, str]):
        pass

    def _c_dec(self, c_type: str, c_name: str) -> str:
        if '*)(' in c_type:
            return c_type.replace('*)(', '*' + c_name + ')(', 1)
        elif '(' in c_type:
            return c_type.replace('(', '(*' + c_name + ')(', 1)
        elif '[' in c_type:
            return c_type.replace('[', c_name + '[', 1)
        else:
            return c_type + ' ' + c_name

    def _vfun(self, vfun: Dict[str, Any]):
        fun = {
            'name': self._prefix + vfun['name'],
            'rtype': vfun['rtype'],
            'args': list()
        }
        self._c_source.write(vfun['rtype'] + ' ' + fun['name'] + '(')
        call = vfun['name'] + '('

        first = True
        for arg in vfun['args']:
            if '...' in arg['type']:
                break
            if not first:
                call += ', '
                self._c_source.write(', ')
            first = False
            self._c_source.write(self._c_dec(arg['type'], arg['name']))
            call += arg['name']
            fun['args'].append(arg)

        self._c_source.write('){')
        call += ');'
        if vfun['rtype'] != 'void':
            self._c_source.write('return ')
        self._c_source.write(call + '}\n')

        return fun

    def _header_message(self, info) -> str:
        if 'vendor' in info['info'] and 'version' in info['info']:
            mpi_version = ' from ' + info['info']['vendor'] + ' v' + info['info']['version']
        else:
            mpi_version = ''
        return f'File generated by mpi4all v{__version__}{mpi_version} DO NOT EDIT.'
